<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<link href="/css/style.css" rel="stylesheet" type="text/css">

<link href="https://unpkg.com/aos@2.3.4/dist/aos.css" rel="stylesheet">
<script src="https://unpkg.com/aos@2.3.4/dist/aos.js"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<script>
  window.curr_lang = JSON.parse(<%- data %>.lang_data.curr_lang);
  window.all_langs = JSON.parse(<%- data %>.lang_data.all_langs);
  curr_content = JSON.parse(curr_lang["content"]);

  window.getPageProperty = (
      page =
        (location.href.lastIndexOf("/") === location.href.length - 1)
        ? "index"
        : location.href.split("/").pop(),
      id) => {
    if(typeof id !== "string") {
      console.error(`ERROR "getPageProperty()": ID should be string, not ${typeof id}.`);
      return null;
    }
    
    return JSON.parse(curr_content[page]).id;
  };

  window.isEmptyObject = (value) => {
    if (value == null) {
      // null or undefined
      return false;
    }

    if (typeof value !== 'object') {
      // boolean, number, string, function, etc.
      return false;
    }

    const proto = Object.getPrototypeOf(value);

    // consider `Object.create(null)`, commonly used as a safe map
    // before `Map` support, an empty object as well as `{}`
    if (proto !== null && proto !== Object.prototype) {
      return false;
    }

    for (const prop in value) {
      if (Object.hasOwn(value, prop)) {
        return false;
      }
    }

    return true;
  };
  
  document.title = window.getPageProperty("head");
</script>